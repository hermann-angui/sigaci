# docker-compose.yml
version: '3.8'

# Define custom networks for better isolation and communication
networks:
  web:
    external: true # Use an external network for Traefik
  app-network:
    driver: bridge # Internal network for app services

# Define named volumes for data persistence
#volumes:
#  db-data:
#    driver: local
#  traefik-data:
#    driver: local

services:
  # PHP-FPM Service
  php:
    build:
      context: ./docker_conf/php
      dockerfile: Dockerfile
    container_name: symfony-php
    volumes:
      - ./app:/var/www/html                  # Mount your Symfony project into the container
    environment:
      # Set Symfony environment to development
      APP_ENV: dev
      # Adjust PHP memory limit if needed
      PHP_MEMORY_LIMIT: 512M
    networks:
      - app-network
    restart: unless-stopped

  # Nginx Web Server Service
  nginx:
    image: nginx:alpine
    container_name: symfony-nginx
    volumes:
      - ./app:/var/www/html # Mount only the public directory as read-only
      - ./docker_conf/nginx/default.conf:/etc/nginx/conf.d/default.conf # Nginx configuration
    depends_on:
      - php # Nginx depends on PHP-FPM
    networks:
      - app-network
      - web # Connect to Traefik's network
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"
      # Router for your Symfony application
      - "traefik.http.routers.symfony.rule=Host(`cnmci.sfpci.com`)" # Change to your domain
      - "traefik.http.routers.symfony.entrypoints=websecure"
      - "traefik.http.routers.symfony.tls.certresolver=letsencrypt"
      # Service definition for Nginx
      - "traefik.http.services.symfony.loadbalancer.server.port=80"
    restart: unless-stopped

  # MySQL Database Service
  mysql:
    image: mysql:8.0
    container_name: symfony-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root_password # Change to a strong password
      MYSQL_DATABASE: symfony_db # Change to your database name
      MYSQL_USER: symfony_user # Change to your database user
      MYSQL_PASSWORD: symfony_password # Change to a strong password
    volumes:
      - ./db:/var/lib/mysql # Persistent volume for database data
    networks:
      - app-network
    restart: unless-stopped

  # phpMyAdmin Service
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: symfony-phpmyadmin
    environment:
      PMA_HOST: mysql # Link to the MySQL service name
      MYSQL_ROOT_PASSWORD: root_password # Use the same root password as MySQL
    depends_on:
      - mysql # phpMyAdmin depends on MySQL
    networks:
      - app-network
      - web # Connect to Traefik's network
    labels:
      # Enable Traefik for phpMyAdmin
      - "traefik.enable=true"
      # Router for phpMyAdmin
      - "traefik.http.routers.phpmyadmin.rule=Host(`db-cnmci.sfpci.com`)" # Change to your domain
      - "traefik.http.routers.phpmyadmin.entrypoints=websecure"
      - "traefik.http.routers.phpmyadmin.tls.certresolver=letsencrypt"
      # Service definition for phpMyAdmin
      - "traefik.http.services.phpmyadmin.loadbalancer.server.port=80"
    restart: unless-stopped

  # Traefik Reverse Proxy Service
  traefik:
    image: traefik:v2.10 # Use a stable Traefik v2 version
    container_name: traefik
    command:
      # Enable Docker provider to discover services via labels
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false" # Only expose services with traefik.enable=true
      # Entrypoints for HTTP and HTTPS
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Enable Traefik API and Dashboard
      - "--api.dashboard=true"
      # Configure Let's Encrypt resolver
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true" # Use TLS challenge for Let's Encrypt
      - "--certificatesresolvers.letsencrypt.acme.email=anguidev@gmail.com" # IMPORTANT: Change to your email
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme.json" # Where certs are stored
      # Use Let's Encrypt staging environment for testing (remove for production)
      - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      # Load dynamic configuration from a file
      - "--providers.file.filename=/etc/traefik/dynamic_conf.yml"
      - "--providers.file.watch=true" # Watch for changes in the dynamic config file
    ports:
      - "80:80"   # HTTP entrypoint
      - "443:443" # HTTPS entrypoint
      - "8080:8080" # Traefik Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro                # Mount Docker socket for Traefik to discover services
      - ./docker_conf/traefik-data:/etc/traefik/                                # Persistent volume for Traefik data (e.g., Let's Encrypt certs)
      - ./docker_conf/traefik/traefik.yml:/etc/traefik/traefik.yml:ro           # Mount Traefik static config
      - ./docker_conf/traefik/dynamic_conf.yml:/etc/traefik/dynamic_conf.yml:ro # Mount Traefik dynamic config
     # - ./docker_conf/traefik/acme.json:/etc/traefik/acme.json        # Volume for Let's Encrypt certificates
    networks:
      - web
    restart: unless-stopped